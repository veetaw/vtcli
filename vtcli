#!/usr/bin/env python3

import argparse
import os
import sys
from time import sleep

from daemonize import Daemonize
from vtspy import VirusTotal, VirusTotalException

file_path = ""
file_name = ""


class CliUtils:
    def __init__(self):
        self.p = argparse.ArgumentParser()
        self.add_args()
        self.check()

    def add_args(self):
        self.p.add_argument('file', help='path to the file you want to scan')

    def check(self):
        try:
            os.environ['VIRUS_TOTAL_TOKEN']
        except KeyError:
            print('you must set the virus total api token with:\n')
            print('$ export VIRUS_TOTAL_TOKEN=\"token-here\"')
            sys.exit(1)
        args = self.p.parse_args()
        global file_path
        global file_name
        file_name = args.file
        file_path = os.path.abspath(args.file)
        if not os.path.isfile(file_path):
            print('vtcli can scan only files under 30MB not directories nor unexistent files')
            sys.exit(0)
        elif os.path.getsize(file_path) >= 30000000:
            print('vtcli can scan only files under 30MB')
            sys.exit(0)

        if not os.path.exists(os.path.expanduser('~/.vtcli/')):
            os.makedirs(os.path.expanduser('~/.vtcli/logs/'))


class Scan:
    def __init__(self, fp):

        self.pid = '/tmp/vtcli.pid'

        self.v = VirusTotal(os.environ['VIRUS_TOTAL_TOKEN'])
        self.result = self.v.scan(open(fp, 'rb'), file_name)
        try:
            report = self.v.get_report(self.result['resource'])
            if self.__is_scan_completed(report):
                self.print(report, fp)
            else:
                print('scan queued, running it in background...')
                print('you will find logs at ~/.vtcli/logs/')
                daemon = Daemonize(app='vtcli', pid=self.pid, action=self.run_daemon)
                daemon.start()
        except VirusTotalException as e:
            print('fatal error ', e)
            sys.exit(0)

    @staticmethod
    def print(report, fp):
        pretty_report = 'file {0} ({1}) successfully scanned\n'
        pretty_report += 'date: {2}\n'
        pretty_report += 'result: {3} of {4} antiviruses reported this file as malware.\n'

        date = report['scan_date']
        positives = report['positives']
        total = report['total']

        if positives > 0:
            print('this file is probably a malware.\n')
        else:
            print('this file is probably not a malware.\n')

        print(pretty_report.format(file_name, fp, date, positives, total))

        print('you can find the complete report at ~/.vtcli/logs/{0}.json'.format(report['md5']))
        with open(os.path.expanduser('~/.vtcli/logs/{0}.json'.format(report['md5'])), 'w') as log_file:
            log_file.write(str(report))

    def run_daemon(self):
        multiplier = 2
        sleep(5)  # first sleep to avoid status_code error
        try:
            while True:
                if self.__is_scan_completed(self.v.get_report(self.result['resource'])):
                    break
                if multiplier >= 8:
                    os.system('notify-send "VTCLI" "time limit exceded. Try rescanning the file {0}"'.format(file_path))
                    self.die()

                sleep(multiplier**2)
                multiplier += 1

            report = self.v.get_report(self.result['resource'])
            with open(os.path.expanduser('~/.vtcli/logs/{0}.json'.format(report['md5'])), 'w') as log_file:
                log_file.write(str(report))
            os.system('notify-send "VTCLI" "scan complete, logs @ {0}"'.format(
                os.path.expanduser('~/.vtcli/logs/{0}.json'.format(report['md5']))))
        except Exception as e:
            os.system('notify-send "VTCLI error" "' + str(e) + '"')

    def die(self):
        os.kill(self.pid, 9)

    @staticmethod
    def __is_scan_completed(report):
        try:
            report['positives']  # KeyError if scan is not complete (response_code -2 randomly doesn't work)
            return True
        except KeyError:
            return False


if __name__ == '__main__':
    CliUtils()
    Scan(file_path)
